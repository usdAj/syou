<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang=ja-JP>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <link type="text/css" href="./mystyle.css" rel="stylesheet">
    <title>4.5 main メソッド、クラス、引数と返却値</title>
  </head>
  
  <body>
    <div class="navigation">
      <a href="./B4_4.htm" accesskey="p">&lt;&lt;previous</a> |  
      <a href="./index.htm">index</a> | 
      <a href="./B4_1.htm">1</a> | 
      <a href="./B4_2.htm">2</a> | 
      <a href="./B4_3.htm">3</a> | 
      <a href="./B4_4.htm">4</a> | 
      <strong>5</strong> | 
      <a href="./B4_6.htm">6</a> | 
      <a href="./B4_7.htm">7</a> | 
      <a href="./B4_8.htm">8</a> | 
      <a href="./B4_9.htm">9</a> | 
      <a href="./B4_10.htm">10</a> | 
      <a href="./B4_6.htm" accesskey="n">next&gt;&gt;</a>
    </div>
  
    <h1 class="title">4.5 main メソッド、クラス、引数と返却値</h1>
    
    <div id="content">
      <h2>プログラム</h2>
      <img src="./B4_5src_2.png" alt="B4_5">
    </div>
    
    <div id="explain">
      <h2>プログラムの説明</h2>
      <table class="explain" summary="explain">
        <tr>
          <th>mainメソッドとクラス</th>
          <td>
            <p>プログラムB4_2を見てください。このmainメソッドでTeacherオブジェクトが生成（インスタンス化）されています。</p>
            <p>確認になりますが、クラスのオブジェクトを使用するにはクラスのコンストラクタ（クラス名と同じ特殊なメソッド）を呼び出しオブジェクトを生成する必要があります。</p>
            <p>Teacherクラスのソースコードを見てください。クラスはオブジェクトの設計図でした。</p>
            <p>クラスは基本的に以下の三つの宣言から成り立っています。</p>
            <ul>
              <li>クラスの宣言</li>
              <li>状態（インスタンス変数など）の宣言</li>
              <li>振る舞い（メソッド）の宣言</li>
            </ul>
            <p>クラス宣言のブロックで状態の宣言と振る舞いの宣言が行われます。ただし、状態の宣言の順番やメソッドの宣言の順番には意味がありません。</p>
            <p>つまり、Teacherクラス宣言のブロックでは実行が上から下に動作してはいません。</p>
            <p>もう一度、プログラムB4_2を見てください。mainメソッドの命令の各行に番号が付いています。各行の意味は</p>
            <ol>
              <li>Teacherクラスの変数の宣言になります。宣言と同時にTeacherオブジェクトが生成され、変数名teacherでラベリングされています。ただし、生成時にコンストラクタに引数としてStringオブジェクトが二つ渡されています。</li>
              <li>変数名teacherでラベリングしたオブジェクトにsetSalaryメッセージを送ります。この時、引数としてint（整数）型が渡されています。</li>
              <li>変数名teacherでラベリングしたオブジェクトにgetSalaryメッセージを送ります。引数はありませんが、返却値として状態のthis.salaryの値が返却されます。</li>
            </ol>
            <p>となります。</p>
          </td>
        </tr>
        <tr>
          <th>引数と返却値</th>
          <td>
            <p>引数とはメソッドに渡される値（オブジェクト）で、返却値とはメソッドの部分に返却される値（オブジェクト）となります。</p>
            <p>それでは、Teacherクラスのソースコードを見てください。各mainメソッドメッセージがどのようにTeacherオブジェクトに伝えられるかを説明します。</p>
            <p>まず、B4_2のTeahcerオブジェクトに対するメッセージの順番がTeacherクラスのソースコードの上から下に動作していないことが改めてわかります。</p>
            <p>オブジェクト側からは以下のように振る舞います。</p>
            <ol>
              <li>コンストラクタが呼び出されます。返却値としてTeacherオブジェクトが返却されます。引数として文字列が二つ渡されます。<br>コンストラクタのブロックでオブジェクトの状態であるthis.nameとthis.idに引数で渡されたnameとidの値（オブジェクト）を代入します。</li>
              <li>setSalaryメソッドが呼び出されます。引数としてint（整数）型の値が渡されます。返却値はありません。<br>setSalaryのブロックでオブジェクトの状態であるthis.salaryに引数で渡されたsalaryの値を代入します</li>
              <li>getSalaryメソッドが呼び出されます。引数はありませんが、返却値として状態のthis.salaryを呼び出し元に返却します。</li>
            </ol>
            <p>getSalaryのブロックでは返却するthis.salaryをreturnキーワードで指定します。</p>
          </td>
        </tr>
      </table>
      
      
    </div>
  </body>
</html>